name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment:
      # 배포 환경 이름을 지정합니다. 필요에 따라 수정하세요.
      name: chkoo_azteam 

    env:
      # Terraform 백엔드 설정을 위한 환경 변수입니다.
      # GitHub Repository Environments Secrets에 아래 값들을 등록해야 합니다.
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0 # 필요에 따라 Terraform 버전을 수정하세요.

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -no-color \
            -input=false

      - name: Terraform Fmt and Style
        id: fmt
        run: terraform fmt -check -diff -recursive -no-color

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan_output
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color -json tfplan | tee plan.json
          cat plan.json | jq . > formatted_plan.json
          mv formatted_plan.json plan.json
          echo "::set-output name=stdout::$(cat plan.json)"
        continue-on-error: true # 계획 실패 시에도 다음 단계로 진행하여 피드백 제공

      - name: Terraform Plan Status
        if: steps.plan_output.outcome == 'failure'
        run: |
          echo "Terraform Plan failed. Please check the output above."
          exit 1

      - name: Terraform Plan Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const plan = JSON.parse(process.env.PLAN_OUTPUT);
            const comment = `#### Terraform Plan 📖\n\`\`\`json\n${JSON.stringify(plan, null, 2)}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        env:
          PLAN_OUTPUT: ${{ steps.plan_output.outputs.stdout }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
